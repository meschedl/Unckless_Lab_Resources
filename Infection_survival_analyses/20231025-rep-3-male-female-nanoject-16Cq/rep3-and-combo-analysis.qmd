---
title: "20231025-male-female-rep3-16Cq-nanoject"
format: gfm
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(dpi=300,fig.width=12, fig.height = 7)
```

Load in packages needed for the analysis

```{r}
library("survival")
library("survminer")
library(dplyr)
library(tidyr)
library(stringr)
```

### Loop to convert the example data.frame 'df' into properly formatted data.frame 'results'

```{r}
#write a function to transform a data.frame that has the column format 'vial | treatment | D0 | D1 | D2...', with one row for each vial
#into a long version in tidy format that can be input to make a survivorship curve
convert_df<-function(df){
  #open empty data.frame to store results
  results<-data.frame(vial=character(),treatment=character(),dead=numeric(),status=numeric())
  #This loop will index out each row (one row per vial) one at a time, transform it into long format (one row per fly), and add the information to the empty data.frame called results
  for(i in 1:nrow(df)){
  #isolate the row (vial) you want to work on
  temp<-df[i,]
    #iteratively isolate each day for this vial (day 0 must be column 3, day 1 column 4, etc.). Loop stops the column before the last day
    for(j in 3:(ncol(temp)-1)){
      #assign the number of flies that died in the vial on that day (starting with day 1) to the variable 'z'
      z<-temp[1,j]-temp[1,j+1]
        #if >0 flies died add this information to the results dataframe
        if(z>0){
          #iterate over 1 through total number of dead flies
          for(k in 1:z){
            #add a new row to the 'results' data.frame for the given dead fly, specifying vial #, treatment, day died, and
            #record the current vial #
            vial<-temp[,1]
            #record the genotype of the current vial
            treatment<-temp[,2]
            #record the death date of the flies that died on this day (assumes that your input DF starts with day 0 in column 3)
            dd<-j-2
            #append this information into a new row in the 'results' data.frame, and add a '1' in the 4th column to indicate mortality
            results[nrow(results)+1,]<- c(vial,treatment,dd,1)
          } #close for loop
        } #close if loop
    } #close for loop
  
  #now assign the number of flies remaining in the vial on the last day (value in the last column of the row) to the variable 'z'
  z<-temp[1,j+1]
    #if there are any flies alive in the vial on the last day
    if(z>0){
      #iterate over 1:(number of flies alive on the last day)
      for(l in 1:z){
        #record the current vial #
        vial<-temp[,1]
        #record the genotype of the current vial
        treatment<-temp[,2]
        #record the last day we recorded this fly alive (assumes that your input DF starts with day 0 in column 3)
        dd<-j-2
        #append this information into a new row in the 'results' data.frame, and add a '0' in the 4th column to indicate that the fly made it to the end of the experiment
        results[nrow(results)+1,]<- c(vial,treatment,dd,0)
      } #close for loop
    } #close if loop
  } #close original for loop
results$dead<-as.numeric(results$dead)  #reiterate that this column must be class numeric
results$status<-as.numeric(results$status)  #reiterate that this column must be class numeric
results$vial <- as.factor(results$vial) # make sure vial is considered a factor
# gives you only the results dataframe as output from function 
return(results) 
} #close function
```

Read in raw data

```{r}
#read the file from csv
df<-read.csv("/Users/maggieschedl/Desktop/Github/Unckless_Lab_Resources/Infection_survival_analyses/20231025-rep-3-male-female-nanoject-16Cq/20231025-sheet.csv")

# separate out columns needed
df<-df[,c(1,3,14:32)]

```

Convert dataframe

```{r}
df.convert<-convert_df(df)
```

Plot survivial curve

```{r}
# change to not have confidence intervals in this one so you can see them 
df_fit<- survfit(Surv(dead, status) ~ treatment, data=df.convert)
ggsurvplot(df_fit,
          pval = TRUE, conf.int = FALSE,
          #risk.table = TRUE, # Add risk table
          #risk.table.col = "strata", # Change risk table color by groups
          #linetype = "strata", # Change line type by groups
          #surv.median.line = "hv", # Specify median survival
          ggtheme = theme_bw(), # Change ggplot2 theme
          palette = c("orchid", "aquamarine", "blueviolet", "darkslategray3")) + ylab("Survival Proporation") + xlab("Days post injection")

```

Combined replicates 1, 2, and 3

```{r}
#read the file from csv
df2<-read.csv("/Users/maggieschedl/Desktop/Github/Unckless_Lab_Resources/Infection_survival_analyses/20231025-rep-3-male-female-nanoject-16Cq/male-female-rep-1-2-3-counts-combo.csv")

# convert dataframe

df2.convert <- convert_df(df2)

# add in block information 
# first 69 rows are block A, second 69 rows are block B, and last 68 rows are block C
df2.convert$Block <- rep(c("A","B", "C"), c(69, 68,68))

# add in sex information and DiNV information as separate columns by splitting the treatment column 
# split the columns 
df2.convert_S <- str_split_fixed(df2.convert$treatment, "-", 2)
# change column names
colnames(df2.convert_S) <- c("sex", "injection")

# add columns to df 
df2.convert_full <- cbind(df2.convert,df2.convert_S )

```

Plot all replicates as one

```{r}

df2.convert_full <- df2.convert_full %>% 
  mutate(treatment = factor(treatment, levels = c("male-CCM", "female-CCM", "male-DiNV", "female-DiNV")))

df_fit_combo_1 <- survfit(Surv(dead, status) ~ treatment, data=df2.convert_full)
ggsurvplot(df_fit_combo_1, size = 5,
          pval = FALSE, conf.int = FALSE,
          legend = "bottom",
          font.tickslab = c(14),
          font.x = c(16),
          font.y = c(16),
          ggtheme = theme_light(),
          title = "Comparing Male and Female D. innubila injected with 16Cq DiNV",
          legend.title="Treatment",
          legend.labs=c("male CCM", "female CCM", "male 16Cq DiNV", "female 16Cq DiNV"),
          font.legend = c(14),
          palette = c("#ccf9ff", "#62CFF4" ,"#2C67F2",  "#191970")) + ylab("Survival Proporation") + xlab("Days post injection")
        
          
```

Find median survival time by treatment 
```{r}
surv_median(df_fit_combo_1, combine = FALSE)
```


Start looking at models

Model just looking at significance of block and treatment

```{r}
# model including block 
df_fit_combo_2<- coxph(Surv(dead, status) ~ treatment + Block, data=df2.convert_full)
summary(df_fit_combo_2)

```

Model just looking at significance of block and treatment without sex

```{r}
# model including block 
df_fit_combo_3<- coxph(Surv(dead, status) ~ injection + Block, data=df2.convert_full)
summary(df_fit_combo_3)

```

Model looking at significance of block and treatment with sex

```{r}
# model including block 
df_fit_combo_4<- coxph(Surv(dead, status) ~ injection + Block + sex, data=df2.convert_full)
summary(df_fit_combo_4)

```

Model looking at significance of block and treatment by sex interaction

```{r}
# model including block 
df_fit_combo_5<- coxph(Surv(dead, status) ~ Block + sex*injection, data=df2.convert_full)
summary(df_fit_combo_5)

```

Model looking at significance treatment by sex interaction

```{r}
# model including block 
df_fit_combo_6<- coxph(Surv(dead, status) ~ injection + sex*injection, data=df2.convert_full)
summary(df_fit_combo_6)

```

Compare models, which is best?

```{r}
# AIC of model with injection and block, not sex 
extractAIC(df_fit_combo_3)
# 1285.719
# AIC of model with injection, block, and sex 
extractAIC(df_fit_combo_4)
# 1284.327
# AIC of model with block and sex * injection interaction 
extractAIC(df_fit_combo_5)
# 1282.92
# AIC of model with injection and sex * injection interaction, no block 
extractAIC(df_fit_combo_6)
# 1291.299

# compare AICs 

# compare block and inject to block, sex, + inject 
exp((1284.327 - 1285.719)/2)
# 0.4985756 no sif difference between models 

# compare block, sex, inject to block and sex * inject interaction 
exp((1282.92 - 1284.327)/2)
# 0.4948503 no sig diff between models 

# compare inject, block, and sex to inject and sex*inject interaction 
exp((1284.327 - 1291.299)/2)
# 0.03062312 significant difference, indicating that the better model would be model with block + inject + sex lower AIC 
# using df_fit_combo_4 as my final model 
```



